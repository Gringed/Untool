// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  stripeId  String   @unique
  amount    Float
  plan      String?
  credits   Int?
  buyer     User     @relation(fields: [buyerId], references: [id])
  buyerId   String
}

model User {
  id            String        @id @default(cuid()) @map("_id")
  email         String        @unique
  emailVerified Boolean?
  name          String
  image         String
  username      String?
  photo         String?
  firstName     String?
  lastName      String?
  planId        Int
  plan          String        @default("Free")
  creditBalance Int           @default(10)
  accounts      Account[]
  sessions      Session[]
  images        Image[]
  transactions  Transaction[]
}

model Image {
  id                 String   @id @default(cuid()) @map("_id")
  title              String
  transformationType String
  publicId           String
  secureURL          String
  width              Int?
  height             Int?
  config             Json?
  transformationUrl  String?
  aspectRatio        String?
  color              String?
  prompt             String?
  multiple           Boolean?
  removeShadow       Boolean?
  author             User     @relation(fields: [authorId], references: [id])
  authorId           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
